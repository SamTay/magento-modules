<?php
/**
 * @package     BlueAcorn\LayeredNavigation
 * @version     1.0.0
 * @author      Sam Tay @ Blue Acorn, Inc. <code@blueacorn.com>
 * @copyright   Copyright Â© 2016 Blue Acorn, Inc.
 */
namespace BlueAcorn\LayeredNavigation\Model\ResourceModel\Facet;

use Magento\Catalog\Model\ResourceModel\Product\Collection as ProductCollection;

/**
 * Class Price
 * Basically a helper class for the Facet Resource Model -- this class handles low level pricing modifications
 * to select objects.
 * @see Magento\Catalog\Model\ResourceModel\Layer\Filter\Price
 */
class Price
{
    /**
     * @param ProductCollection $collection
     * @param $from
     * @param $to
     */
    public function addFilter(ProductCollection $collection, $from, $to)
    {
        if ($from === '' && $to === '') {
            return;
        }

        $select = $collection->getSelect();
        $priceExpr = $this->_getPriceExpression($select);

        if ($to !== '') {
            $to = (double)$to;
            if ($from == $to) {
                $to += \Magento\Catalog\Model\ResourceModel\Layer\Filter\Price::MIN_POSSIBLE_PRICE;
            }
        }

        if ($from !== '') {
            $select->where($priceExpr . ' >= ' . $this->_getComparingValue($from));
        }
        if ($to !== '') {
            $select->where($priceExpr . ' < ' . $this->_getComparingValue($to));
        }
    }

    /**
     * Price expression generated by products collection
     *
     * @param ProductCollection $collection
     * @param \Magento\Framework\DB\Select $select
     * @return string
     */
    protected function _getPriceExpression(ProductCollection $collection, $select)
    {
        $priceExpression = $collection->getPriceExpression($select);
        $additionalPriceExpression = $collection->getAdditionalPriceExpression($select);
        $result = empty($additionalPriceExpression)
            ? $priceExpression
            : "({$priceExpression} {$additionalPriceExpression})";

        return $result;
    }

    /**
     * Get comparing value sql part
     *
     * @param float $price
     * @param bool $decrease
     * @return float
     */
    protected function _getComparingValue($price, $decrease = true)
    {
        $currencyRate = $this->layer->getProductCollection()->getCurrencyRate();
        if ($decrease) {
            return ($price - self::MIN_POSSIBLE_PRICE / 2) / $currencyRate;
        }
        return ($price + self::MIN_POSSIBLE_PRICE / 2) / $currencyRate;
    }
}
